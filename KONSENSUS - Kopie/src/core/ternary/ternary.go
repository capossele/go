package ternary

import (
    "bytes"
    "math"
)

const (
    NUMBER_OF_TRITS_IN_A_BYTE = 5
    NUMBER_OF_TRITS_IN_A_TRYTE = 3
)

var (
    TRYTE_ALPHABET = []string{
        "9", "A", "B", "C", "D", "E", "F", "G", "H",
        "I", "J", "K", "L", "M", "N", "O", "P", "Q",
        "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
    }

    BYTES_TO_TRITS = []Trit {
         0,  0,  0,  0,  0,  1,  0,  0,  0,  0, -1,  1,  0,  0,  0,  0,  1,  0,  0,  0,  1,  1,  0,  0,  0, -1, -1,
         1,  0,  0,  0, -1,  1,  0,  0,  1, -1,  1,  0,  0, -1,  0,  1,  0,  0,  0,  0,  1,  0,  0,  1,  0,  1,  0,
         0, -1,  1,  1,  0,  0,  0,  1,  1,  0,  0,  1,  1,  1,  0,  0, -1, -1, -1,  1,  0,  0, -1, -1,  1,  0,  1,
        -1, -1,  1,  0, -1,  0, -1,  1,  0,  0,  0, -1,  1,  0,  1,  0, -1,  1,  0, -1,  1, -1,  1,  0,  0,  1, -1,
         1,  0,  1,  1, -1,  1,  0, -1, -1,  0,  1,  0,  0, -1,  0,  1,  0,  1, -1,  0,  1,  0, -1,  0,  0,  1,  0,
         0,  0,  0,  1,  0,  1,  0,  0,  1,  0, -1,  1,  0,  1,  0,  0,  1,  0,  1,  0,  1,  1,  0,  1,  0, -1, -1,
         1,  1,  0,  0, -1,  1,  1,  0,  1, -1,  1,  1,  0, -1,  0,  1,  1,  0,  0,  0,  1,  1,  0,  1,  0,  1,  1,
         0, -1,  1,  1,  1,  0,  0,  1,  1,  1,  0,  1,  1,  1,  1,  0, -1, -1, -1, -1,  1,  0, -1, -1, -1,  1,  1,
        -1, -1, -1,  1, -1,  0, -1, -1,  1,  0,  0, -1, -1,  1,  1,  0, -1, -1,  1, -1,  1, -1, -1,  1,  0,  1, -1,
        -1,  1,  1,  1, -1, -1,  1, -1, -1,  0, -1,  1,  0, -1,  0, -1,  1,  1, -1,  0, -1,  1, -1,  0,  0, -1,  1,
         0,  0,  0, -1,  1,  1,  0,  0, -1,  1, -1,  1,  0, -1,  1,  0,  1,  0, -1,  1,  1,  1,  0, -1,  1, -1, -1,
         1, -1,  1,  0, -1,  1, -1,  1,  1, -1,  1, -1,  1, -1,  0,  1, -1,  1,  0,  0,  1, -1,  1,  1,  0,  1, -1,
         1, -1,  1,  1, -1,  1,  0,  1,  1, -1,  1,  1,  1,  1, -1,  1, -1, -1, -1,  0,  1,  0, -1, -1,  0,  1,  1,
        -1, -1,  0,  1, -1,  0, -1,  0,  1,  0,  0, -1,  0,  1,  1,  0, -1,  0,  1, -1,  1, -1,  0,  1,  0,  1, -1,
         0,  1,  1,  1, -1,  0,  1, -1, -1,  0,  0,  1,  0, -1,  0,  0,  1,  1, -1,  0,  0,  1, -1,  0,  0,  0,  1,
         0,  0,  0,  0,  1,  1,  0,  0,  0,  1, -1,  1,  0,  0,  1,  0,  1,  0,  0,  1,  1,  1,  0,  0,  1, -1, -1,
         1,  0,  1,  0, -1,  1,  0,  1,  1, -1,  1,  0,  1, -1,  0,  1,  0,  1,  0,  0,  1,  0,  1,  1,  0,  1,  0,
         1, -1,  1,  1,  0,  1,  0,  1,  1,  0,  1,  1,  1,  1,  0,  1, -1, -1, -1,  1,  1,  0, -1, -1,  1,  1,  1,
        -1, -1,  1,  1, -1,  0, -1,  1,  1,  0,  0, -1,  1,  1,  1,  0, -1,  1,  1, -1,  1, -1,  1,  1,  0,  1, -1,
         1,  1,  1,  1, -1,  1,  1, -1, -1,  0,  1,  1,  0, -1,  0,  1,  1,  1, -1,  0,  1,  1, -1,  0,  0,  1,  1,
         0,  0,  0,  1,  1,  1,  0,  0,  1,  1, -1,  1,  0,  1,  1,  0,  1,  0,  1,  1,  1,  1,  0,  1,  1, -1, -1,
         1,  1,  1,  0, -1,  1,  1,  1,  1, -1,  1,  1,  1, -1,  0,  1,  1,  1,  0,  0,  1,  1,  1,  1,  0,  1,  1,
         1, -1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1,  1,
        -1, -1, -1, -1, -1,  0, -1, -1, -1,  0,  0, -1, -1, -1,  1,  0, -1, -1, -1, -1,  1, -1, -1, -1,  0,  1, -1,
        -1, -1,  1,  1, -1, -1, -1, -1, -1,  0, -1, -1,  0, -1,  0, -1, -1,  1, -1,  0, -1, -1, -1,  0,  0, -1, -1,
         0,  0,  0, -1, -1,  1,  0,  0, -1, -1, -1,  1,  0, -1, -1,  0,  1,  0, -1, -1,  1,  1,  0, -1, -1, -1, -1,
         1, -1, -1,  0, -1,  1, -1, -1,  1, -1,  1, -1, -1, -1,  0,  1, -1, -1,  0,  0,  1, -1, -1,  1,  0,  1, -1,
        -1, -1,  1,  1, -1, -1,  0,  1,  1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1,  0, -1,  0, -1, -1,  0, -1,  1,
        -1, -1,  0, -1, -1,  0, -1,  0, -1,  0,  0, -1,  0, -1,  1,  0, -1,  0, -1, -1,  1, -1,  0, -1,  0,  1, -1,
         0, -1,  1,  1, -1,  0, -1, -1, -1,  0,  0, -1,  0, -1,  0,  0, -1,  1, -1,  0,  0, -1, -1,  0,  0,  0, -1,
         0,  0,  0,  0, -1,  1,  0,  0,  0, -1, -1,  1,  0,  0, -1,  0,  1,  0,  0, -1,  1,  1,  0,  0, -1, -1, -1,
         1,  0, -1,  0, -1,  1,  0, -1,  1, -1,  1,  0, -1, -1,  0,  1,  0, -1,  0,  0,  1,  0, -1,  1,  0,  1,  0,
        -1, -1,  1,  1,  0, -1,  0,  1,  1,  0, -1,  1,  1,  1,  0, -1, -1, -1, -1,  1, -1,  0, -1, -1,  1, -1,  1,
        -1, -1,  1, -1, -1,  0, -1,  1, -1,  0,  0, -1,  1, -1,  1,  0, -1,  1, -1, -1,  1, -1,  1, -1,  0,  1, -1,
         1, -1,  1,  1, -1,  1, -1, -1, -1,  0,  1, -1,  0, -1,  0,  1, -1,  1, -1,  0,  1, -1, -1,  0,  0,  1, -1,
         0,  0,  0,  1, -1,  1,  0,  0,  1, -1, -1,  1,  0,  1, -1,  0,  1,  0,  1, -1,  1,  1,  0,  1, -1, -1, -1,
         1,  1, -1,  0, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1,  0,  1,  1, -1,  0,  0,  1,  1, -1,  1,  0,  1,  1,
        -1, -1,  1,  1,  1, -1,  0,  1,  1,  1, -1,  1,  1,  1,  1, -1, -1, -1, -1, -1,  0,  0, -1, -1, -1,  0,  1,
        -1, -1, -1,  0, -1,  0, -1, -1,  0,  0,  0, -1, -1,  0,  1,  0, -1, -1,  0, -1,  1, -1, -1,  0,  0,  1, -1,
        -1,  0,  1,  1, -1, -1,  0, -1, -1,  0, -1,  0,  0, -1,  0, -1,  0,  1, -1,  0, -1,  0, -1,  0,  0, -1,  0,
         0,  0,  0, -1,  0,  1,  0,  0, -1,  0, -1,  1,  0, -1,  0,  0,  1,  0, -1,  0,  1,  1,  0, -1,  0, -1, -1,
         1, -1,  0,  0, -1,  1, -1,  0,  1, -1,  1, -1,  0, -1,  0,  1, -1,  0,  0,  0,  1, -1,  0,  1,  0,  1, -1,
         0, -1,  1,  1, -1,  0,  0,  1,  1, -1,  0,  1,  1,  1, -1,  0, -1, -1, -1,  0,  0,  0, -1, -1,  0,  0,  1,
        -1, -1,  0,  0, -1,  0, -1,  0,  0,  0,  0, -1,  0,  0,  1,  0, -1,  0,  0, -1,  1, -1,  0,  0,  0,  1, -1,
         0,  0,  1,  1, -1,  0,  0, -1, -1,  0,  0,  0,  0, -1,  0,  0,  0,  1, -1,  0,  0,  0, -1,  0,  0,  0,  0,
    }
)

func BytesToTrits(bytes []byte) Trinary {
    size := len(bytes)
    trits := make([]Trit, size * NUMBER_OF_TRITS_IN_A_BYTE)

    for i := 0; i < size; i++ {
        v := int(bytes[i])
        if int8(bytes[i]) < 0 {
            v -= 13
        }

        for j := 0; j < NUMBER_OF_TRITS_IN_A_BYTE; j++ {
            trits[i * NUMBER_OF_TRITS_IN_A_BYTE + j] = BYTES_TO_TRITS[v * NUMBER_OF_TRITS_IN_A_BYTE + j]
        }
    }

    return trits
}

func TritsToBytes(trits Trinary) []byte {
    l := len(trits)
    size := int(math.Ceil(float64(l) / NUMBER_OF_TRITS_IN_A_BYTE))

    index := func(i int) Trit {
        if i >= l {
            return 0
        }

        return trits[i]
    }

    bytes := make([]byte, size)
    for i := 0; i < size; i += 1 {
        bytes[i] = byte(
            index(i * NUMBER_OF_TRITS_IN_A_BYTE + 0) +
            index(i * NUMBER_OF_TRITS_IN_A_BYTE + 1) * 3 +
            index(i * NUMBER_OF_TRITS_IN_A_BYTE + 2) * 9 +
            index(i * NUMBER_OF_TRITS_IN_A_BYTE + 3) * 27 +
            index(i * NUMBER_OF_TRITS_IN_A_BYTE + 4) * 81)
    }

    return bytes
}

func TritsToString(trits Trinary, offset int, size int) string {
    var buffer bytes.Buffer
    for i := 0; i < (size + NUMBER_OF_TRITS_IN_A_TRYTE - 1) / NUMBER_OF_TRITS_IN_A_TRYTE; i++ {
        j := int(trits[offset + i * NUMBER_OF_TRITS_IN_A_TRYTE]) + int(trits[offset + i * NUMBER_OF_TRITS_IN_A_TRYTE + 1]) * NUMBER_OF_TRITS_IN_A_TRYTE + int(trits[offset + i * NUMBER_OF_TRITS_IN_A_TRYTE + 2]) * NUMBER_OF_TRITS_IN_A_TRYTE * NUMBER_OF_TRITS_IN_A_TRYTE;
        if j < 0 {
            j += len(TRYTE_ALPHABET)
        }
        buffer.WriteString(TRYTE_ALPHABET[j]);
    }

    return buffer.String()
}